# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
name: CI

on:
  push:
    paths:
      - 'app/**'
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
          DATADOG_SITE: datadoghq.com
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
    steps:
      - name: Dump GitHub context
        run: |
          echo "${{ toJson(vars) }}"
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Datadog datadog-ci
        run: npm install -g @datadog/datadog-ci
      - name: Tag Pipeline
        run: datadog-ci tag --level pipeline --tags team:developer-experience
      - name: Set up JDK 11 for x64
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.7
      # https://github.com/marketplace/actions/configure-datadog-test-visibility
      - name: Configure Datadog Test Optimization
        uses: datadog/test-visibility-github-action@v2
        with:
          languages: java
          site: ${{ env.DATADOG_SITE }}
          api_key: ${{ env.DATADOG_API_KEY }}
      - name: Test application
        run: ./gradlew clean test
        env:
          DD_ENV: ci
          DD_SERVICE: developer-app
      - name: Build application
        run: ./gradlew bootJar
      - name: Check code meets quality and security standards
        id: datadog-static-analysis
        uses: DataDog/datadog-static-analyzer-github-action@v1
        with:
          dd_api_key: ${{ env.DATADOG_API_KEY }}
          dd_app_key: ${{ env.DATADOG_APP_KEY }}
          dd_service: developer-app
          dd_env: ci
          dd_site: datadoghq.com
          cpu_count: 2
      - name: Check imported libraries are secure and compliant
        id: datadog-software-composition-analysis
        uses: DataDog/datadog-sca-github-action@main
        with:
          dd_api_key: ${{ env.DATADOG_API_KEY }}
          dd_app_key: ${{ env.DATADOG_APP_KEY }}
          dd_service: my-app
          dd_env: ci
          dd_site: datadoghq.com
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
          docker buildx build --push -t yaalexf/developer-app:${{ github.ref_name }} \
          --platform linux/amd64,linux/arm64 \
          --build-arg BUILD=${{ github.run_id }} \
          --build-arg GIT_COMMIT_SHA=${{ github.sha }} \
          --build-arg GIT_URL=${{ github.repositoryUrl }} \
          -f docker/Dockerfile .
      - name: Updates manifest
        env:
          CONTAINER_IMAGE: yaalexf/developer-app
        run: |
          docker pull ${CONTAINER_IMAGE}:${{ github.ref_name }}
          export IMAGE_DIGEST=$(docker inspect ${CONTAINER_IMAGE}:${{ github.ref_name }} -f json | jq -r '.[0] | .RepoDigests | .[0]')
          echo $IMAGE_DIGEST
          cd /home/runner/work/developer-app/developer-app/kubernetes
          cat developer-app.yaml
          git push -D argocd/${{ github.ref_name }} || echo "Branch does not exist"
          git branch -b argocd/${{ github.ref_name }}
          sed -i -e "s/${CONTAINER_IMAGE/\//\\/}[:|@].*/${IMAGE_DIGEST/\//\\/}/" developer-app.yaml
          cat developer-app.yaml
          git config user.name "${{ github.workflow }} workflow"
          git config user.email bot@users.noreply.github.com
          git add developer-app.yaml
          git commit -m "GitHub Actions run ${{ github.run_id }}"
          git push -u origin argocd/${{ github.ref_name }}
